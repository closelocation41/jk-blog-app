name: Deploy to AWS

on:
  push:
    branches:
      - main  # Change this if needed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1  # Change this if needed

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Clone Backend and Frontend Repositories
      run: |
        git clone https://github.com/closelocation41/jk-frontend.git frontend
        git clone https://github.com/closelocation41/jk-backend.git backend

    - name: Build and Push Docker Images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        BACKEND_REPO: jk-blog-backend
        FRONTEND_REPO: jk-blog-frontend
      run: |
        docker build -t $ECR_REGISTRY/$BACKEND_REPO:latest ./backend
        docker build -t $ECR_REGISTRY/$FRONTEND_REPO:latest ./frontend
        docker push $ECR_REGISTRY/$BACKEND_REPO:latest
        docker push $ECR_REGISTRY/$FRONTEND_REPO:latest

    - name: Deploy to AWS EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ubuntu  # Change this if needed
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
          # Install Git, Docker, and Docker Compose
          sudo apt update
          sudo apt install -y git docker.io docker-compose

          # Start Docker service if not running
          sudo systemctl start docker
          sudo systemctl enable docker

          # Authenticate Docker with ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY

          # Pull latest images from ECR
          docker pull $ECR_REGISTRY/$BACKEND_REPO:latest
          docker pull $ECR_REGISTRY/$FRONTEND_REPO:latest

          # Start or update the services using Docker Compose
          docker-compose -f /home/ubuntu/docker-compose.yml up -d --force-recreate
        EOF
